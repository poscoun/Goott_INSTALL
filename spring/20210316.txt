file -> switch workspace -> other -> spring_workspace

https://spring.io/projects/spring-framework#learn
project -> spring tools 4

이클립스 -> help -> 이클립스 마켓 -> sts -> spring tools 3 (standalone edition)
설치확인
new -> other-> spring ->spring bean configuration file(sts3)

new ->  project ->  java Project -> name: spring_app01

C 드라이브에 spring_libs

이클립스 configure build path -> libraries -> add Library -> user lib -> new -> name: springlibs -> add external jars -> spring_libs에 있는 모든 파일

+ spring
 : Enterprise급 appliation 개발을 위한 framework

1. Rod Johnson이 창시
2. 어플리케이션 개발의 복잡성을 줄여주기 위한 목적
3. EJB 사용으로 수행되엇던 모든 기능을 POJO를 사용해서 가능하게 함
 - EJB (Enterprise JavaBeans)
 : 기업환경을 구축하기 위한 서버측 컴포넌트 모델
 : 어플리케이션 업무 로직을 가지고 있는 서버 어플리케이션

- POJO (Plain Old Java Object)
 : getter/setter를 가진 단순한 자바 프로젝트

4. IOC (Inversion Of Control)
 - 어플리케이션 동작에 대한 제어권이 개발자에게 있는게 아니라 컨테이너에게 제어권이 있다

  DI (Depedency Injection) : 의존성 주입
 - 컨테이너에 있는 정보를 스프링 프레임워크가  run time시 불러와서 동작

5. AOP (Aspect Oriented Programming)
6. POJO (Plain Old Java Project) 지원
7. 경량 컨테이너
8. 모듈화 되어있어 필요한 모듈만 추가 기능

---------------------------------------------------------------------------------------------
+ 스프링은 모듈화 되어있어 모듈을 가져다 build 후 사용하면 됨.
 그러나 이 모듈을 release에 따라서 계속 바꿔서 추가해줘야 하는 불편함이 생김.
 그래서 maven을 통해 

maven : 빌드툴(build tool) + 오픈소스버전관리

https://mvnrepository.com/ - spring 서치

1. Spring Context10,153 usages 클릭

5.2.13.RELEASE 클릭

<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-context</artifactId>
    <version>5.2.13.RELEASE</version>
</dependency>

version, build 사이에 dependency안에 넣기

--------------------------------------------------------------------------------------------------
+ spring_app04_maven_ex project

1. maven project 변환
2. 필요한 모듈 build
3. spring_app02을 구현